<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[算法题丨目录索引]]></title>
    <url>%2Fposts%2Falgorithm%2Findex%2F</url>
    <content type="text"><![CDATA[介绍&emsp;&emsp;本系列的受众目标是对算法有兴趣的、愿意和我一起进步、学习和提高的同学，要求有一定的数据结构基础，链表、排序、二叉树等等一些基本知识，可能需要一些基础的数学知识。如果这方面有所欠缺或不懂的，请自行找相关资料看一下，笔者就不再累述了。&emsp;&emsp;文章旨在帮助大家学习和整理算法，分门别类的总结相关知识点和平台上对应的算法题。每题都有完整的示例代码，都是综合整理各位大牛的代码，精炼出尽可能简短的，并且每段代码笔者也测试验证过，保证正确有效，可以参考文末资料中的代码，下载并调试。&emsp;&emsp;算法试题多是从POJ,ZOJ,LeetCode等网站获取，一些题的解题思路在作者自己实现过程中，也参考广大网友提供的solution。另外，目前只是列出了大体的框架，有些算法个人还没有实现，我会持续不断更新的，希望大家能多多关注，也欢迎给我留言。&emsp;&emsp;最后笔者的目标是：不仅仅是在告诉what，而且告诉why（分析各种算法的思路和优缺点），希望大家可以举一反三！ 文章目录 Linear List Array Remove Duplicates from Sorted Array Remove Duplicates from Sorted Array II Longest Consecutive Sequence Two Sum 3Sum 3Sum Closest 4Sum Remove Element Move Zeroes Next Permutation Permutation Sequence Valid Sudoku Trapping Rain Water Rotate Image Plus One Climbing Stairs Set Matrix Zeroes Gas Station Candy Majority Element Rotate Array Contains Duplicate Contains Duplicate II Contains Duplicate III Product of Array Except Self Game of Life Increasing Triplet Subsequence Single Linked List Reverse Linked List Odd Even Linked List Add Two Numbers Reverse Linked List II Partition List Remove Duplicates from Sorted List Remove Duplicates from Sorted List II Rotate List Remove Nth Node From End of List Swap Nodes in Pairs Reverse Nodes in k-Group Copy List with Random Pointer Linked List Cycle Linked List Cycle II Reorder List LRU Cache Palindrome Linked List String Valid Palindrome Implement strStr() String to Integer (atoi) Add Binary Longest Palindromic Substring Regular Expression Matching Wildcard Matching Longest Common Prefix Valid Number Integer to Roman Roman to Integer Count and Say Anagrams Valid Anagram Simplify Path Length of Last Word Isomorphic Strings Word Pattern Stack &amp; Queue Stack Min Stack Valid Parentheses Longest Valid Parentheses Largest Rectangle in Histogram Evaluate Reverse Polish Notation Implement Stack using Queues Queue Implement Queue using Stacks Binary Tree Binary Tree Traversal Binary Tree Preorder Traversal Binary Tree Inorder Traversal Binary Tree Postorder Traversal Binary Tree Level Order Traversal Binary Tree Level Order Traversal II Binary Tree Right Side View Invert Binary Tree Binary Search Tree Iterator Binary Tree Zigzag Level Order Traversal Recover Binary Search Tree Same Tree Symmetric Tree Balanced Binary Tree Flatten Binary Tree to Linked List Populating Next Right Pointers in Each Node II Construct Binary Tree Construct Binary Tree from Preorder and Inorder Traversal Construct Binary Tree from Inorder and Postorder Traversal Binary Search Trees Unique Binary Search Trees Unique Binary Search Trees II Validate Binary Search Tree Convert Sorted Array to Binary Search Tree Convert Sorted List to Binary Search Tree LCA of BST Kth Smallest Element in a BST Recursive of Binary Tree Minimum Depth of Binary Tree Maximum Depth of Binary Tree Path Sum Path Sum II Binary Tree Maximum Path Sum Populating Next Right Pointers in Each Node Sum Root to Leaf Numbers LCA of Binary Tree Segment Tree Range Sum Query - Mutable Sort Insertion Sort Insertion Sort List Merge Sort Merge Two Sorted Arrays Merge Two Sorted Lists Merge k Sorted Lists Sort List Quick Sort Sort Colors Kth Largest Element in an Array Bucket Sort First Missing Positive Count Sort H-Index Radix Sort Maximum Gap Other Sort Largest Number Search Search for a Range Search Insert Position Search in Rotated Sorted Array Search in Rotated Sorted Array II Search a 2D Matrix Search a 2D Matrix II Find Minimum in Rotated Sorted Array Find Minimum in Rotated Sorted Array II Median of Two Sorted Arrays H-Index II Violence Enumeration Subsets Subsets II Permutations Permutations II Combinations Letter Combinations of a Phone Number Breadth-First Search Word Ladder Word Ladder II Surrounded Regions Depth-First Search Additive Number Palindrome Partitioning Unique Paths Unique Paths II N-Queens N-Queens II Restore IP Addresses Combination Sum Combination Sum II Combination Sum III Generate Parentheses Sudoku Solver Word Search 相关资料 LeetCode POJ ZOJ 算法珠玑 代码实现(C#版)]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>编程技巧</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法题丨4Sum]]></title>
    <url>%2Fposts%2Falgorithm%2F4Sum%2F</url>
    <content type="text"><![CDATA[描述 Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target?Find all unique quadruplets in the array which gives the sum of target.Note: The solution set must not contain duplicate quadruplets. 示例12345678Given array S = [1, 0, -1, 0, -2, 2], and target = 0.A solution set is:[ [-1, 0, 0, 1], [-2, -1, 1, 2], [-2, 0, 0, 2]] 算法分析难度：中分析：给定整型数组和指定一个整型目标值，从整形数组中找出4个不同的元素，使得4个元素之和等于目标值，返回结果为所有满足上述条件的元素组合。思路：思路可以参考3Sum，主要难度是由原先的找3个元素之和，变成了找4个元素之和。这种情况下，其实有点像解魔方：玩五阶魔方就是从五阶降到四阶，然后再从四阶降到三阶，最后再按照玩三阶魔方的方法解决问题。最终的解法，其实就是在3阶解法的基础上，在外层再套一层4阶的循环，并做一些基础的判断，复杂度也是在3阶n²基础上*n=n³，当然，这种算法也可推广到n阶。 代码示例(C#)1234567891011121314151617181920212223242526272829303132333435363738394041424344454647public IList&lt;IList&lt;int&gt;&gt; FourSum(int[] nums, int target)&#123; List&lt;IList&lt;int&gt;&gt; res = new List&lt;IList&lt;int&gt;&gt;(); if (nums.Length &lt; 4) return res; //排序 Array.Sort(nums); //4阶判断 for (int i = 0; i &lt; nums.Length - 3; i++) &#123; //如果最近4个元素之和都大于目标值，因为数组是排序的，后续只可能更大，所以跳出循环 if (nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] &gt; target) break; //当前元素和最后3个元素之和小于目标值即本轮最大值都小于目标值，则本轮不满足条件，跳过本轮 if (nums[i] + nums[nums.Length - 1] + nums[nums.Length - 2] + nums[nums.Length - 3] &lt; target) continue; //防止重复组合 if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1]) continue; //3阶判断 for (int j = i + 1; j &lt; nums.Length - 2; j++) &#123; //原理同4阶判断 if (nums[i] + nums[j] + nums[j + 1] + nums[j + 2] &gt; target) break; if (nums[i] + nums[j] + nums[nums.Length - 1] + nums[nums.Length - 2] &lt; target) continue; int lo = j + 1, hi = nums.Length - 1; while (lo &lt; hi) &#123; //已知元素 nums[i],nums[j],剩下2个元素做夹逼 int sum = nums[i] + nums[j] + nums[lo] + nums[hi]; if (sum == target) &#123; res.Add(new List&lt;int&gt; &#123; nums[i], nums[j], nums[lo], nums[hi] &#125;); while (lo &lt; hi &amp;&amp; nums[lo] == nums[lo + 1]) lo++; while (lo &lt; hi &amp;&amp; nums[hi] == nums[hi - 1]) hi--; lo++; hi--; &#125; //两边夹逼 else if (sum &lt; target) lo++; else hi--; &#125; &#125; &#125; return res;&#125; 复杂度 时间复杂度：O (n³). 空间复杂度：O (1). 附录 系列目录索引 代码实现(C#版) 相关算法 Two Sum 3Sum 3Sum Closest]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>编程技巧</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法题丨3Sum Closest]]></title>
    <url>%2Fposts%2Falgorithm%2F3Sum%20Closest%2F</url>
    <content type="text"><![CDATA[描述 Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target.Return the sum of the three integers. You may assume that each input would have exactly one solution. 示例123Given array S = &#123;-1 2 1 -4&#125;, and target = 1.The sum that is closest to the target is 2. (-1 + 2 + 1 = 2). 算法分析难度：中分析：给定整型数组中和一个指定的目标整型值，从数组中找到3个元素，满足3个元素之和最接近目标值，返回结果为3个元素之和。思路：大体思路类似3Sum算法，也是先将数组排序，然后开始遍历，3个元素分别是当前遍历的元素、夹逼开始元素默认当前元素后面的元素，夹逼结束元素默认数组最后的元素，通过夹逼开始元素递增和夹逼结束元素递减来实现夹逼：&emsp;1. 如果这3个元素之和比目标值大，则需要夹逼结束元素值变小，才有可能接近目标值，所以夹逼结束元素递减；&emsp;2. 如果这3个元素之和不比目标值大，则需要夹逼开始元素值变大，才有可能接近目标值，所以夹逼开始元素递增；本次遍历结束后，再判断本次3元素之和目前记录的最接近之和比较，取更接近的做为返回结果，然后继续遍历，直至遍历结果，获得返回结果。 代码示例(C#)123456789101112131415161718192021222324252627282930public int ThreeSumClosest(int[] nums, int target)&#123; int res = nums[0] + nums[1] + nums[nums.Length - 1]; //排序后遍历 Array.Sort(nums); for (int i = 0; i &lt; nums.Length - 2; i++) &#123; //从当前后面的元素和最后一个元素，两边夹逼 int lo = i + 1, hi = nums.Length - 1; while (lo &lt; hi) &#123; int sum = nums[i] + nums[lo] + nums[hi]; if (sum &gt; target) &#123; hi--; &#125; else &#123; lo++; &#125; //如果此次遍历的3个元素的和更接近，则赋值返回的结果 if (Math.Abs(sum - target) &lt; Math.Abs(res - target)) &#123; res = sum; &#125; &#125; &#125; return res;&#125; 复杂度 时间复杂度：O (n²). 空间复杂度：O (1). 附录 系列目录索引 代码实现(C#版) 相关算法 Two Sum 3Sum 4Sum]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>编程技巧</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法题丨3Sum]]></title>
    <url>%2Fposts%2Falgorithm%2F3Sum%2F</url>
    <content type="text"><![CDATA[描述 Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.Note: The solution set must not contain duplicate triplets. 示例 1234567Given array S = [-1, 0, 1, 2, -1, -4],A solution set is:[ [-1, 0, 1], [-1, -1, 2]] 算法分析难度：中分析：要求给定的数组，找出满足条件的3个元素组合，使得3个元素之和等于零。注意，元素不能重复(值可以相同)。思路：首先，我们需要对数组进行排序，比如数组排序后变为[-4, -1, -1, 0, 1, 2]，我们判断第一个元素-4，判断它之后是否有2个元素的和等于4，如果有的话满足条件。因为数组已经排序，只要向当前元素之后查找即可，不用往前查找；接下来，我们开始遍历排序后的数组，假设当前元素是x，判断本次遍历有解的条件可以转化为找到当前元素之后2个元素和，应该等于0-x，使用夹逼查找方法，检查是否有解，如果有，增加到返回队列，没有的话，进入下一次的遍历，直至找到所有满足条件组合。 代码示例(C#)12345678910111213141516171819202122232425262728293031public IList&lt;IList&lt;int&gt;&gt; ThreeSum(int[] nums)&#123; //排序 Array.Sort(nums); var res = new List&lt;IList&lt;int&gt;&gt;(); //当前元素向后匹配2个元素，所以最后2个元素不用被遍历 for (int i = 0; i &lt; nums.Length - 2; i++) &#123; if (i == 0 || (i &gt; 0 &amp;&amp; nums[i] != nums[i - 1])) &#123; int lo = i + 1, hi = nums.Length - 1, sum = 0 - nums[i]; while (lo &lt; hi) &#123; //找到满足条件元素，添加到返回结果队列 if (nums[lo] + nums[hi] == sum) &#123; res.Add(new List&lt;int&gt; &#123; nums[i], nums[lo], nums[hi] &#125;); //防止重复元素 while (lo &lt; hi &amp;&amp; nums[lo] == nums[lo + 1]) lo++; while (lo &lt; hi &amp;&amp; nums[hi] == nums[hi - 1]) hi--; //夹逼查找 lo++; hi--; &#125; else if (nums[lo] + nums[hi] &lt; sum) lo++; else hi--; &#125; &#125; &#125; return res;&#125; 复杂度 时间复杂度：O (n²). 空间复杂度：O (1). 附录 系列目录索引 代码实现(C#版) 相关算法 Two Sum 3Sum Closest 4Sum]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>编程技巧</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法题丨Two Sum]]></title>
    <url>%2Fposts%2Falgorithm%2FTwo%20Sum%2F</url>
    <content type="text"><![CDATA[描述 Given an array of integers, return indices of the two numbers such that they add up to a specific target.You may assume that each input would have exactly one solution, and you may not use the same element twice. 示例 1234Given nums = [2, 7, 11, 15], target = 9,Because nums[0] + nums[1] = 2 + 7 = 9,return [0, 1]. 算法分析难度：低分析：要求给定的数组，查找其中2个元素，满足这2个元素的相加等于给定目标target的值。思路：一般的思路，我们遍历数组元素，假设当前遍历的数组元素x，再次遍历x之后的数组元素，假设当前再次遍历的数组元素y，判断x+y是否满足target，如果满足，则返回x,y下标，否则继续遍历，直至循环结束。考虑这种算法的时间复杂度是O (n²)，不是最优的解法。跟前面几章类似，我们可以考虑用哈希表来存储数据，这里用C#提供的Hashtable来存储下标-对应值（key-value）键值对；接着遍历数组元素，如果目标值-当前元素值存在当前的Hashtable中，则表明找到了满足条件的2个元素，返回对应的下标；如果Hashtable没有满足的目标值-当前元素值的元素，将当前元素添加到Hashtable，进入下一轮遍历，直到满足上一条的条件。 代码示例(C#)123456789101112131415public int[] TwoSum(int[] nums, int target)&#123; var map = new Hashtable(); ; for (int i = 0; i &lt; nums.Length; i++) &#123; int complement = target - nums[i]; //匹配成功，返回结果 if (map.ContainsKey(complement)) &#123; return new int[] &#123; (int)map[complement], i &#125;; &#125; map.Add(nums[i], i); &#125; return null;&#125; 复杂度 时间复杂度：O (n). 空间复杂度：O (1). 附录 系列目录索引 代码实现(C#版) 相关算法 3Sum 3Sum Closest 4Sum]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>编程技巧</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法题丨Longest Consecutive Sequence]]></title>
    <url>%2Fposts%2Falgorithm%2FLongest%20Consecutive%20Sequence%2F</url>
    <content type="text"><![CDATA[描述 Given an unsorted array of integers, find the length of the longest consecutive elements sequence.Your algorithm should run in O(n) complexity. 示例 12Given [100, 4, 200, 1, 3, 2],The longest consecutive elements sequence is [1, 2, 3, 4]. Return its length: 4. 算法分析难度：高分析：给定未排序的整型数组，找到数值连续的元素，并返回连续元素的最大长度。思路：首先考虑一般的思路，可以将数组先排序，然后遍历数组元素，判断是否连续，返回最大连续元素的个数，这样的话，循环的复杂度为O (n)，排序的复杂度为O (nlgn)，算法的整体复杂度为O (nlgn)，并不满足题目要求的复杂度。所以，该算法题目的难点是如何采用O (n)的算法。再考虑使用哈希表来存储元素，因为哈希表提供了O (1)复杂度的Contains方法，以便我们快速的访问元素:&emsp;1. 首先，我们将数组元素构造成哈希表，并定义变量longestStreak=0，用来记录最大连续元素的个数;&emsp;2. 遍历哈希表,判断当前元素num-1，是否存在在哈希表中：&emsp;&emsp;a). 如果不存在，不用处理，继续遍历哈希表下一个元素;&emsp;&emsp;b). 如果存在，说明有比当前元素小1的值，则定义currentNum=当前元素，定义currentStreak=1，表示currentNum作为开始比较的元素，刚开始的连续元素个数为1；&emsp;&emsp;c). 开始后续比较，如果哈希表存在currentNum+1的元素，表示当前元素currentNum有后续相邻的元素，连续的元素为之前最大连续元素次数+1，开始下个一个元素比较，即currentNum+1;&emsp;&emsp;d). 后续比较结束后，将本次循环获得的currentStreak作为本次循环记录的最大连续元素个数，记录本次最大连续次数currentStreak和之前最大连续次数longestStreak的最大值到longestStreak，并进入下一个循环遍历;&emsp;3. 循环遍历结束后，返回最大连续次数longestStreak; 代码示例(C#)12345678910111213141516171819202122232425262728public int LongestConsecutive(int[] nums)&#123; var numSet = new HashSet&lt;int&gt;(nums); //记录最大连续元素个数 int longestStreak = 0; foreach (int num in numSet) &#123; //存在跟当前元素连续的值 if (!numSet.Contains(num - 1)) &#123; int currentNum = num; int currentStreak = 1; //每匹配到后面连续的元素，当前最大连续元素个数+1 while (numSet.Contains(currentNum + 1)) &#123; currentNum += 1; currentStreak += 1; &#125; //最大连续元素个数取当前最大连续元素和记录的最大连续元素个数两者最大者 longestStreak = Math.Max(longestStreak, currentStreak); &#125; &#125; return longestStreak;&#125; 复杂度 时间复杂度：O (n). 空间复杂度：O (n). 附录 系列目录索引 代码实现(C#版)]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>编程技巧</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法题丨Remove Duplicates from Sorted Array II]]></title>
    <url>%2Fposts%2Falgorithm%2FRemove%20Duplicates%20from%20Sorted%20Array%20II%2F</url>
    <content type="text"><![CDATA[描述 Follow up for “Remove Duplicates“:What if duplicates are allowed at most twice? 示例 1234Given sorted array nums = [1,1,1,2,2,3],Your function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3. It doesn&apos;t matter what you leave beyond the new length. 算法分析难度：中分析：条件参考Remove Duplicates，只不过之前元素只允许重复1次，现在改为最多可以重复2次。思路：既然输入的数组排好序的，那我们定义一个有效元素的数组长度变量i，然后开始遍历元素：&emsp;1. 检索当前元素之前的2个元素，如果跟当前元素相等，说明不满足最多重复2次的条件了，这时候有效元素的数组长度i就不要再自增了；&emsp;2. 否则的话，之前的2个元素，如跟当前元素不相等（小于），说明这个当前元素为有效值，所以将数组末尾元素赋值当前元素,有效元素的数组长度i自增1；依照上述逻辑循环判断，一直到数组最后一个元素，循环结束后，根据有效元素的数组长度i，获得[0,i)范围内的数组元素，即为题目要求的结果。 代码示例(C#)1234567891011public int RemoveDuplicates2(int[] nums)&#123; int i = 0; foreach (var num in nums) &#123; //判断是否有2个以上重复，有的话有效索引+1，并将当前元素赋值到有效数组 if (i &lt; 2 || num &gt; nums[i - 2]) nums[i++] = num; &#125; return i;&#125; 复杂度 时间复杂度：O (n). 空间复杂度：O (1). 附录 系列目录索引 代码实现(C#版) 相关算法 Remove Duplicates from Sorted Array]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>编程技巧</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法题丨Remove Duplicates from Sorted Array]]></title>
    <url>%2Fposts%2Falgorithm%2FRemove%20Duplicates%20from%20Sorted%20Array%2F</url>
    <content type="text"><![CDATA[描述 Given a sorted array, remove the duplicates in-place such that each element appear only once and return the new length.Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory. 示例 12345Given nums = [1,1,2], Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.It doesn&apos;t matter what you leave beyond the new length. 算法分析难度：低分析：要求给定的排序后的数组，将其中重复的元素去除（是的每个元素只出现一次），并返回最终数组的长度。算法不要分配额外的数组空间。思路：既然输入的数组已然排好序，我们可以定义i,j两个数组下标值，开始i初始为0，用来记录数组中有效元素下标，j从1开始，用来记录遍历数组的下标：如果数组[j]==数组[i],表示有重复，重复元素个数i不用累计，遍历数组下一条;如果数组[j]！=数组[i]，表示没有重复，有效元素下标i自增+1，把数组[i]值用数组[j]替代，比较下一个元素;依次遍历，直到数组[j]至最后一个元素，最终[0,i]范围内的数组元素，即为题目要求的结果。 代码示例(C#)123456789101112131415public int RemoveDuplicates(int[] nums)&#123; if (nums.Length == 0) return 0; int i = 0; for (int j = 1; j &lt; nums.Length; j++) &#123; //不重复的话，有效索引+1，将当前元素值记录在索引对应的数组上 if (nums[j] != nums[i]) &#123; i++; nums[i] = nums[j]; &#125; &#125; return i + 1;&#125; 复杂度 时间复杂度：O (n). 空间复杂度：O (1). 附录 系列目录索引 代码实现(C#版) 相关算法 Remove Duplicates from Sorted Array II]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>编程技巧</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
</search>
